from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)

TOKEN = "7851494992:AAFeeAuNzI6UeIYZe9167IJfP_ZbwOLvMA0"
ADMIN_ID = 861941692

users = {}  # user_id -> dict {phone, first_name, last_name, username}
active_chats = {}  # user_id -> admin_id
active_admins = {}  # admin_id -> user_id
user_waiting_for_request = {}  # user_id -> —Ç–µ–º–∞ –∑–∞—è–≤–∫–∏

phone_kb = ReplyKeyboardMarkup(
    [[KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º üìû", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

user_kb = ReplyKeyboardMarkup(
    [["–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É"], ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó"], ["–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–æ–∫"], ["–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞"]],
    resize_keyboard=True,
)

admin_kb = ReplyKeyboardMarkup(
    [["–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"], ["/users"], ["–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"]],
    resize_keyboard=True,
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text(
            "–í—ñ—Ç–∞—é, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_kb
        )
        return

    if user_id in users:
        await update.message.reply_text(
            "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=user_kb
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
            reply_markup=phone_kb,
        )


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    contact = update.message.contact
    if contact is None or contact.user_id != user_id:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    phone = contact.phone_number
    users[user_id] = {
        "phone": phone,
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "username": user.username or "",
    }
    await update.message.reply_text(
        f"–î—è–∫—É—é, –≤–∞—à –Ω–æ–º–µ—Ä {phone} –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
        reply_markup=user_kb,
    )
    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name} (@{user.username or 'N/A'})\nID: {user_id}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}",
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—É: {e}")


async def send_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not users:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return
    buttons = []
    for uid, info in users.items():
        name = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        if not name:
            name = info.get("username", "–ù–µ–º–∞—î —ñ–º–µ–Ω—ñ")
        btn_text = f"{name} (ID: {uid})"
        buttons.append(
            [
                InlineKeyboardButton(text=btn_text, callback_data=f"chat_{uid}"),
                InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"del_{uid}"),
            ]
        )
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –ø–æ—á–∞—Ç–∏ —á–∞—Ç –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏:", reply_markup=keyboard
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("chat_"):
        target_user_id = int(data.split("_")[1])
        if target_user_id not in users:
            await query.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        active_chats[target_user_id] = ADMIN_ID
        active_admins[ADMIN_ID] = target_user_id
        info = users[target_user_id]
        name = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        username = info.get("username", "")
        await query.message.reply_text(
            f"–í–∏ –ø–æ—á–∞–ª–∏ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:\n{name} (@{username if username else 'N/A'})\nID: {target_user_id}\n\n"
            "–¢–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–æ—Ç–æ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É'."
        )
        try:
            await context.bot.send_message(
                target_user_id,
                "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–ø–æ—á–∞–≤ –∑ –≤–∞–º–∏ —á–∞—Ç. –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ.",
            )
        except:
            pass

    elif data.startswith("del_"):
        target_user_id = int(data.split("_")[1])
        if target_user_id not in users:
            await query.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            return

        if target_user_id in active_chats:
            active_admin = active_chats.pop(target_user_id)
            active_admins.pop(active_admin, None)
            try:
                await context.bot.send_message(
                    target_user_id, "–í–∞—Å –≤–∏–¥–∞–ª–∏–ª–∏ –∑ –±–∞–∑–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                )
            except:
                pass

        users.pop(target_user_id)
        await query.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {target_user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏.")


async def user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –Ω–æ–º–µ—Ä ‚Äî –Ω–µ –¥–∞—î–º–æ –ø–∏—Å–∞—Ç–∏
    if user_id != ADMIN_ID and user_id not in users:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º üìû' —á–µ—Ä–µ–∑ /start"
        )
        return

    # –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        text = update.message.text if update.message.text else None

        if text:
            if text.lower() == "–æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" or text == "/users":
                await send_users_list(update, context)
                return

            if text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É":
                if ADMIN_ID in active_admins:
                    uid = active_admins.pop(ADMIN_ID)
                    active_chats.pop(uid, None)
                    await update.message.reply_text("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                    try:
                        await context.bot.send_message(uid, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç.")
                    except:
                        pass
                else:
                    await update.message.reply_text("–í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –∂–æ–¥–Ω–æ–≥–æ —á–∞—Ç—É.")
                return

            if ADMIN_ID in active_admins:
                uid = active_admins[ADMIN_ID]
                try:
                    await context.bot.send_message(uid, text)
                except:
                    await update.message.reply_text(
                        "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
                    )
            else:
                await update.message.reply_text(
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' –∞–±–æ /users, —â–æ–± –ø–æ—á–∞—Ç–∏ —á–∞—Ç."
                )
        elif update.message.photo:
            # –ê–¥–º—ñ–Ω –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            if ADMIN_ID in active_admins:
                uid = active_admins[ADMIN_ID]
                photo = update.message.photo[-1]  # –Ω–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å
                caption = update.message.caption if update.message.caption else None
                try:
                    await context.bot.send_photo(uid, photo.file_id, caption=caption)
                except:
                    await update.message.reply_text(
                        "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
                    )
            else:
                await update.message.reply_text(
                    "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
                )
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî –∑–∞—è–≤–∫–∞ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if user_id in user_waiting_for_request:
        —Ç–µ–º–∞ = user_waiting_for_request.pop(user_id)
        —Ç–µ–∫—Å—Ç_–∑–∞—è–≤–∫–∏ = update.message.text

        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
        await update.message.reply_text(
            "–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –ß–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        info = users.get(user_id, {})
        —ñ–º'—è = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        —é–∑–µ—Ä–Ω–µ–π–º = info.get("username", "")
        —Ç–µ–ª–µ—Ñ–æ–Ω = info.get("phone", "")

        –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–¥–ª—è_–∞–¥–º—ñ–Ω–∞ = (
            f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            f"–Ü–º'—è: {—ñ–º'—è}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {—Ç–µ–ª–µ—Ñ–æ–Ω}\n"
            f"Username: @{—é–∑–µ—Ä–Ω–µ–π–º if —é–∑–µ—Ä–Ω–µ–π–º else 'N/A'}\n"
            f"ID: {user_id}\n"
            f"–¢–µ–º–∞ –∑–∞—è–≤–∫–∏: {—Ç–µ–º–∞}\n"
            f"–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n{—Ç–µ–∫—Å—Ç_–∑–∞—è–≤–∫–∏}"
        )
        try:
            await context.bot.send_message(ADMIN_ID, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_–¥–ª—è_–∞–¥–º—ñ–Ω–∞)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—É: {e}")
        return

    # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (–æ–¥–Ω–∞ –∑ —Ç–µ–º)
    if update.message.text:
        —Ç–µ–∫—Å—Ç = update.message.text.lower()

        —Ç–µ–º–∏ = {
            "—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É",
            "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó",
            "—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–æ–∫": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–æ–∫",
            "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞",
        }

        if —Ç–µ–∫—Å—Ç in —Ç–µ–º–∏:
            user_waiting_for_request[user_id] = —Ç–µ–º–∏[—Ç–µ–∫—Å—Ç]
            await update.message.reply_text(
                f"–í–∏ –æ–±—Ä–∞–ª–∏ '{—Ç–µ–º–∏[—Ç–µ–∫—Å—Ç]}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ."
            )
            return

        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º–µ–Ω—é
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É."
        )
        return

    # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞ (—è–∫ –±—É–ª–æ)
    if update.message.photo:
        if user_id in active_chats:
            admin_id = active_chats[user_id]
            photo = update.message.photo[-1]  # –Ω–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å
            caption = update.message.caption if update.message.caption else None
            try:
                await context.bot.send_photo(admin_id, photo.file_id, caption=caption)
            except:
                pass
        else:
            await update.message.reply_text(
                "–©–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ —Ñ–æ—Ç–æ, –ø–æ—á–Ω—ñ—Ç—å —á–∞—Ç –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("users", send_users_list))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), user_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()


if __name__ == "__main__":
    main()
