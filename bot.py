import os
import telebot
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = telebot.TeleBot(TOKEN)

users = {}
pending_phone = {}

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn = types.KeyboardButton("üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    kb.add(btn)
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø–æ—á–∞—Ç–∏ —á–∞—Ç", reply_markup=kb)
    pending_phone[message.chat.id] = True

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    if pending_phone.get(message.chat.id):
        users[message.chat.id] = {
            "name": message.from_user.first_name,
            "phone": message.contact.phone_number
        }
        pending_phone.pop(message.chat.id, None)
        bot.send_message(message.chat.id, "–î—è–∫—É—é! –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=types.ReplyKeyboardRemove())

# –ê–¥–º—ñ–Ω –º–µ–Ω—é
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id == ADMIN_ID:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb)

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@bot.message_handler(func=lambda m: m.chat.id == ADMIN_ID and m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
def list_users(message):
    if not users:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π.")
        return
    text = "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
"
    for uid, data in users.items():
        text += f"{data['name']} ‚Äî {data['phone']} (ID: {uid})
"
    bot.send_message(message.chat.id, text)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda m: m.chat.id == ADMIN_ID and m.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
def delete_user_prompt(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, delete_user)

def delete_user(message):
    try:
        uid = int(message.text)
        if uid in users:
            users.pop(uid)
            bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        else:
            bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π ID.")

# –§–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    if message.chat.id == ADMIN_ID:
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    else:
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)

# –ü–µ—Ä–µ—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda m: not pending_phone.get(m.chat.id))
def forward_message(message):
    if message.chat.id == ADMIN_ID:
        # –Ø–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if message.reply_to_message and message.reply_to_message.forward_from:
            bot.send_message(message.reply_to_message.forward_from.id, message.text)
    else:
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)

bot.polling(none_stop=True)
